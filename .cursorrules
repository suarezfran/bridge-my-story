# Cursor Rules para Bridge My Story

## üéØ Objetivo del Proyecto
Este es un proyecto React + Vite que muestra un puente animado entre Montevideo y San Francisco. Cada hito de la historia agrega un tabl√≥n al puente y el progreso avanza hasta llegar a San Francisco.

## üîß Reglas de Desarrollo

### 1. **VALIDACI√ìN OBLIGATORIA DESPU√âS DE CAMBIOS**
**CR√çTICO**: Despu√©s de cualquier cambio completo en el c√≥digo, SIEMPRE debes:

1. **Compilar y ejecutar la aplicaci√≥n**:
   ```bash
   npm run dev
   ```

2. **Verificar que no hay errores**:
   - Revisar la consola del terminal
   - Verificar que la aplicaci√≥n carga en http://localhost:5173/
   - Comprobar que no hay errores de linting

3. **Validar funcionalidades**:
   - Bot√≥n "Siguiente Hito" funciona
   - Bot√≥n "Autoplay" funciona
   - Animaciones del puente se ejecutan correctamente
   - Panel de hitos aparece y desaparece
   - Dise√±o responsive funciona

### 2. **REGLAS DE CORRECCI√ìN DE ERRORES**
**OBLIGATORIO**: Cuando encuentres CUALQUIER error, DEBES arreglarlo inmediatamente:

#### Errores de Sintaxis:
- ‚úÖ **SIEMPRE arreglar** comillas faltantes, llaves no cerradas, par√©ntesis
- ‚úÖ **SIEMPRE arreglar** errores de JSX (atributos mal formados)
- ‚úÖ **SIEMPRE arreglar** imports incorrectos o faltantes

#### Errores de Linting:
- ‚úÖ **SIEMPRE ejecutar** `npm run lint` despu√©s de cambios
- ‚úÖ **SIEMPRE corregir** variables no utilizadas
- ‚úÖ **SIEMPRE corregir** imports no utilizados
- ‚úÖ **SIEMPRE corregir** errores de ESLint

#### Errores de Compilaci√≥n:
- ‚úÖ **SIEMPRE verificar** que `npm run dev` funciona sin errores
- ‚úÖ **SIEMPRE verificar** que `npm run build` funciona sin errores
- ‚úÖ **SIEMPRE corregir** errores de TypeScript/JavaScript

#### Errores de Runtime:
- ‚úÖ **SIEMPRE probar** la aplicaci√≥n en el navegador
- ‚úÖ **SIEMPRE verificar** que las funcionalidades principales funcionan
- ‚úÖ **SIEMPRE corregir** errores de consola del navegador

### 3. **Estructura del Proyecto**
- `src/App.jsx`: Componente principal con l√≥gica de hitos y autoplay
- `src/components/BridgeSVG.jsx`: Componente SVG del puente animado
- `src/components/MilestonePanel.jsx`: Panel modal para mostrar hitos
- `src/index.css`: Estilos globales con tema dark y colores verdes
- `src/App.css`: Estilos espec√≠ficos y animaciones

### 4. **Tecnolog√≠as y Dependencias**
- **React 19** + **Vite**: Framework y bundler
- **TailwindCSS**: Sistema de estilos
- **Framer Motion**: Animaciones fluidas
- **SVG**: Gr√°ficos vectoriales del puente

### 5. **Patrones de C√≥digo**

#### Componentes React:
```javascript
// Usar hooks de React correctamente
import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

// Estructura de componentes funcionales
function ComponentName({ prop1, prop2 }) {
  const [state, setState] = useState(initialValue)
  
  useEffect(() => {
    // Efectos secundarios
  }, [dependencies])
  
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {/* Contenido */}
    </motion.div>
  )
}
```

#### Estilos con TailwindCSS:
```javascript
// Usar clases de TailwindCSS para responsive design
className="flex flex-col sm:flex-row gap-2 md:gap-4 p-4 md:p-6"

// Colores del tema
className="bg-emerald-600 hover:bg-emerald-700 text-white"
className="bridge-green" // Clase personalizada para verde del puente
```

#### Animaciones con Framer Motion:
```javascript
// Animaciones de entrada
initial={{ opacity: 0, y: -20 }}
animate={{ opacity: 1, y: 0 }}
transition={{ duration: 0.5, ease: "easeOut" }}

// Animaciones de hover
whileHover={{ scale: 1.05 }}
whileTap={{ scale: 0.95 }}
```

### 6. **Validaci√≥n de Errores Comunes**

#### Errores de Sintaxis:
- Verificar comillas cerradas en JSX
- Revisar llaves de cierre en objetos y funciones
- Comprobar imports correctos

#### Errores de Linting:
```bash
npm run lint
```

#### Errores de Build:
```bash
npm run build
```

### 7. **Testing de Funcionalidades**

#### Funcionalidades Cr√≠ticas a Validar:
1. **Sistema de Hitos**:
   - Array `milestones` en App.jsx
   - Funci√≥n `addMilestone()` funciona
   - Progreso se actualiza correctamente

2. **Autoplay**:
   - `toggleAutoplay()` funciona
   - Intervalo de 3 segundos entre hitos
   - Se detiene al llegar al final

3. **Animaciones del Puente**:
   - Tablones se agregan progresivamente
   - Cables aparecen con el progreso
   - Efectos de part√≠culas funcionan

4. **Responsive Design**:
   - Header se adapta a m√≥viles
   - Botones son t√°ctiles en m√≥viles
   - SVG se escala correctamente

### 8. **Comandos de Desarrollo**

```bash
# Desarrollo
npm run dev          # Servidor de desarrollo
npm run build        # Build de producci√≥n
npm run preview      # Preview de la build
npm run lint         # Verificar linting

# Despliegue
vercel               # Desplegar en Vercel
npm run deploy       # Desplegar en GitHub Pages
```

### 9. **Reglas de Commit y Deploy**

- **Antes de cada commit**: Ejecutar `npm run dev` y validar
- **Antes de deploy**: Ejecutar `npm run build` y verificar que no hay errores
- **Documentar cambios**: Actualizar README.md si es necesario

## üö® IMPORTANTE PARA EL LLM

**SIEMPRE que hagas cambios en el c√≥digo**:

1. **Ejecuta `npm run dev`** para verificar que la aplicaci√≥n funciona
2. **Revisa la consola** para errores de compilaci√≥n
3. **Valida las funcionalidades** principales
4. **Informa al usuario** sobre el estado de la aplicaci√≥n

**OBLIGATORIO**: Si encuentras CUALQUIER error:
- ‚úÖ **NO contin√∫es** hasta arreglarlo
- ‚úÖ **Arregla el error** inmediatamente
- ‚úÖ **Verifica** que el arreglo funciona
- ‚úÖ **Ejecuta** `npm run dev` para confirmar

**No asumas que el c√≥digo funciona** sin validarlo. La aplicaci√≥n debe estar ejecut√°ndose correctamente antes de considerar que los cambios est√°n completos.

## üì± URLs de Validaci√≥n

- **Desarrollo**: http://localhost:5173/
- **Build Preview**: http://localhost:4173/ (despu√©s de `npm run preview`)

## üé® Personalizaci√≥n

### Modificar Hitos:
Editar array `milestones` en `src/App.jsx`:
```javascript
const milestones = [
  { id: 1, title: "Nuevo hito", description: "Descripci√≥n", progress: 0.25 },
  // ... m√°s hitos
]
```

### Cambiar Colores:
Modificar clases CSS en `src/index.css`:
- `.bridge-green`: Color principal del puente
- `.bridge-green-bg`: Fondo verde
- `.bridge-green-border`: Bordes verdes